{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseSession = _interopRequireDefault(require(\"./ParseSession\"));\n\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar CURRENT_USER_KEY = 'currentUser';\nvar canUseCurrentUser = !_CoreManager.default.get('IS_NODE');\nvar currentUserCacheMatchesDisk = false;\nvar currentUserCache = null;\nvar authProviders = {};\n/**\n * <p>A Parse.User object is a local representation of a user persisted to the\n * Parse cloud. This class is a subclass of a Parse.Object, and retains the\n * same functionality of a Parse.Object, but also extends it with various\n * user specific methods, like authentication, signing up, and validation of\n * uniqueness.</p>\n *\n * @alias Parse.User\n * @augments Parse.Object\n */\n\nvar ParseUser = /*#__PURE__*/function (_ParseObject) {\n  (0, _inherits2.default)(ParseUser, _ParseObject);\n\n  var _super = _createSuper(ParseUser);\n  /**\n   * @param {object} attributes The initial set of data to store in the user.\n   */\n\n\n  function ParseUser(attributes\n  /*: ?AttributeMap*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseUser);\n    _this = _super.call(this, '_User');\n\n    if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error(\"Can't create an invalid Parse User\");\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * Request a revocable session token to replace the older style of token.\n   *\n   * @param {object} options\n   * @returns {Promise} A promise that is resolved when the replacement\n   *   token has been fetched.\n   */\n\n\n  (0, _createClass2.default)(ParseUser, [{\n    key: \"_upgradeToRevocableSession\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      options = options || {};\n      var upgradeOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        upgradeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.upgradeToRevocableSession(this, upgradeOptions);\n    }\n    /**\n     * Parse allows you to link your users with {@link https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication 3rd party authentication}, enabling\n     * your users to sign up or log into your application using their existing identities.\n     * Since 2.9.0\n     *\n     * @see {@link https://docs.parseplatform.org/js/guide/#linking-users Linking Users}\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options\n     * <ul>\n     *   <li>If provider is string, options is {@link http://docs.parseplatform.org/parse-server/guide/#supported-3rd-party-authentications authData}\n     *   <li>If provider is AuthProvider, options is saveOpts\n     * </ul>\n     * @param {object} saveOpts useMasterKey / sessionToken\n     * @returns {Promise} A promise that is fulfilled with the user is linked\n     */\n\n  }, {\n    key: \"linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this2 = this;\n\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      saveOpts.sessionToken = saveOpts.sessionToken || this.getSessionToken() || '';\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n\n        if (authProviders[provider]) {\n          provider = authProviders[provider];\n        } else {\n          var authProvider = {\n            restoreAuthentication: function () {\n              return true;\n            },\n            getAuthType: function () {\n              return authType;\n            }\n          };\n          authProviders[authProvider.getAuthType()] = authProvider;\n          provider = authProvider;\n        }\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      if (options && options.hasOwnProperty('authData')) {\n        var authData = this.get('authData') || {};\n\n        if ((0, _typeof2.default)(authData) !== 'object') {\n          throw new Error('Invalid type: authData field should be an object');\n        }\n\n        authData[authType] = options.authData;\n\n        var controller = _CoreManager.default.getUserController();\n\n        return controller.linkWith(this, authData, saveOpts);\n      } else {\n        return new _promise.default(function (resolve, reject) {\n          provider.authenticate({\n            success: function (provider, result) {\n              var opts = {};\n              opts.authData = result;\n\n              _this2.linkWith(provider, opts, saveOpts).then(function () {\n                resolve(_this2);\n              }, function (error) {\n                reject(error);\n              });\n            },\n            error: function (provider, _error) {\n              reject(_error);\n            }\n          });\n        });\n      }\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Synchronizes auth data for a provider (e.g. puts the access token in the\n     * right place to be used by the Facebook SDK).\n     *\n     * @param provider\n     */\n\n  }, {\n    key: \"_synchronizeAuthData\",\n    value: function (provider\n    /*: string*/\n    ) {\n      if (!this.isCurrent() || !provider) {\n        return;\n      }\n\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n        provider = authProviders[authType];\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData');\n\n      if (!provider || !authData || (0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      var success = provider.restoreAuthentication(authData[authType]);\n\n      if (!success) {\n        this._unlinkFrom(provider);\n      }\n    }\n    /**\n     * Synchronizes authData for all providers.\n     */\n\n  }, {\n    key: \"_synchronizeAllAuthData\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key in authData) {\n        this._synchronizeAuthData(_key);\n      }\n    }\n    /**\n     * Removes null values from authData (which exist temporarily for unlinking)\n     */\n\n  }, {\n    key: \"_cleanupAuthData\",\n    value: function () {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key2 in authData) {\n        if (!authData[_key2]) {\n          delete authData[_key2];\n        }\n      }\n    }\n    /**\n     * Unlinks a user from a service.\n     *\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options MasterKey / SessionToken\n     * @returns {Promise} A promise that is fulfilled when the unlinking\n     *     finishes.\n     */\n\n  }, {\n    key: \"_unlinkFrom\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this3 = this;\n\n      return this.linkWith(provider, {\n        authData: null\n      }, options).then(function () {\n        _this3._synchronizeAuthData(provider);\n\n        return _promise.default.resolve(_this3);\n      });\n    }\n    /**\n     * Checks whether a user is linked to a service.\n     *\n     * @param {object} provider service to link to\n     * @returns {boolean} true if link was successful\n     */\n\n  }, {\n    key: \"_isLinked\",\n    value: function (provider\n    /*: any*/\n    )\n    /*: boolean*/\n    {\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData') || {};\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return false;\n      }\n\n      return !!authData[authType];\n    }\n    /**\n     * Deauthenticates all providers.\n     */\n\n  }, {\n    key: \"_logOutWithAll\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key3 in authData) {\n        this._logOutWith(_key3);\n      }\n    }\n    /**\n     * Deauthenticates a single provider (e.g. removing access tokens from the\n     * Facebook SDK).\n     *\n     * @param {object} provider service to logout of\n     */\n\n  }, {\n    key: \"_logOutWith\",\n    value: function (provider\n    /*: any*/\n    ) {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      if (typeof provider === 'string') {\n        provider = authProviders[provider];\n      }\n\n      if (provider && provider.deauthenticate) {\n        provider.deauthenticate();\n      }\n    }\n    /**\n     * Class instance method used to maintain specific keys when a fetch occurs.\n     * Used to ensure that the session token is not lost.\n     *\n     * @returns {object} sessionToken\n     */\n\n  }, {\n    key: \"_preserveFieldsOnFetch\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      return {\n        sessionToken: this.get('sessionToken')\n      };\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {boolean} true if user is cached on disk\n     */\n\n  }, {\n    key: \"isCurrent\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!current && current.id === this.id;\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {Promise<boolean>} true if user is cached on disk\n     */\n\n  }, {\n    key: \"isCurrentAsync\",\n    value: function () {\n      var _isCurrentAsync = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n        var current;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return ParseUser.currentAsync();\n\n              case 2:\n                current = _context.sent;\n                return _context.abrupt(\"return\", !!current && current.id === this.id);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function () {\n        return _isCurrentAsync.apply(this, arguments);\n      };\n    }()\n    /**\n     * Returns get(\"username\").\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getUsername\",\n    value: function ()\n    /*: ?string*/\n    {\n      var username = this.get('username');\n\n      if (username == null || typeof username === 'string') {\n        return username;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"username\", username, options) and returns the result.\n     *\n     * @param {string} username\n     */\n\n  }, {\n    key: \"setUsername\",\n    value: function (username\n    /*: string*/\n    ) {\n      // Strip anonymity\n      var authData = this.get('authData');\n\n      if (authData && (0, _typeof2.default)(authData) === 'object' && authData.hasOwnProperty('anonymous')) {\n        // We need to set anonymous to null instead of deleting it in order to remove it from Parse.\n        authData.anonymous = null;\n      }\n\n      this.set('username', username);\n    }\n    /**\n     * Calls set(\"password\", password, options) and returns the result.\n     *\n     * @param {string} password User's Password\n     */\n\n  }, {\n    key: \"setPassword\",\n    value: function (password\n    /*: string*/\n    ) {\n      this.set('password', password);\n    }\n    /**\n     * Returns get(\"email\").\n     *\n     * @returns {string} User's Email\n     */\n\n  }, {\n    key: \"getEmail\",\n    value: function ()\n    /*: ?string*/\n    {\n      var email = this.get('email');\n\n      if (email == null || typeof email === 'string') {\n        return email;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"email\", email) and returns the result.\n     *\n     * @param {string} email\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"setEmail\",\n    value: function (email\n    /*: string*/\n    ) {\n      return this.set('email', email);\n    }\n    /**\n     * Returns the session token for this user, if the user has been logged in,\n     * or if it is the result of a query with the master key. Otherwise, returns\n     * undefined.\n     *\n     * @returns {string} the session token, or undefined\n     */\n\n  }, {\n    key: \"getSessionToken\",\n    value: function ()\n    /*: ?string*/\n    {\n      var token = this.get('sessionToken');\n\n      if (token == null || typeof token === 'string') {\n        return token;\n      }\n\n      return '';\n    }\n    /**\n     * Checks whether this user is the current user and has been authenticated.\n     *\n     * @returns {boolean} whether this user is the current user and is logged in.\n     */\n\n  }, {\n    key: \"authenticated\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!this.get('sessionToken') && !!current && current.id === this.id;\n    }\n    /**\n     * Signs up a new user. You should call this instead of save for\n     * new Parse.Users. This will create a new Parse.User on the server, and\n     * also persist the session on disk so that you can access the user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling signUp.</p>\n     *\n     * @param {object} attrs Extra fields to set on the new user, or null.\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled when the signup\n     *     finishes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var signupOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        signupOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        signupOptions.installationId = options.installationId;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.signUp(this, attrs, signupOptions);\n    }\n    /**\n     * Logs in a Parse.User. On success, this saves the session to disk,\n     * so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling logIn.</p>\n     *\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login is complete.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var loginOptions = {\n        usePost: true\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        loginOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        loginOptions.installationId = options.installationId;\n      }\n\n      if (options.hasOwnProperty('usePost')) {\n        loginOptions.usePost = options.usePost;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logIn(this, loginOptions);\n    }\n    /**\n     * Wrap the default save behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {\n        var _len,\n            args,\n            _key4,\n            current,\n            _args2 = arguments;\n\n        return _regenerator.default.wrap(function (_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                for (_len = _args2.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {\n                  args[_key4] = _args2[_key4];\n                }\n\n                _context2.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"save\", this).apply(this, args);\n\n              case 3:\n                _context2.next = 5;\n                return this.isCurrentAsync();\n\n              case 5:\n                current = _context2.sent;\n\n                if (!current) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n\n              case 8:\n                return _context2.abrupt(\"return\", this);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function () {\n        return _save.apply(this, arguments);\n      };\n    }()\n    /**\n     * Wrap the default destroy behavior with functionality that logs out\n     * the current user when it is destroyed\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function () {\n      var _destroy = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n        var _len2,\n            args,\n            _key5,\n            current,\n            _args3 = arguments;\n\n        return _regenerator.default.wrap(function (_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                for (_len2 = _args3.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {\n                  args[_key5] = _args3[_key5];\n                }\n\n                _context3.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"destroy\", this).apply(this, args);\n\n              case 3:\n                _context3.next = 5;\n                return this.isCurrentAsync();\n\n              case 5:\n                current = _context3.sent;\n\n                if (!current) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", _CoreManager.default.getUserController().removeUserFromDisk());\n\n              case 8:\n                return _context3.abrupt(\"return\", this);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function () {\n        return _destroy.apply(this, arguments);\n      };\n    }()\n    /**\n     * Wrap the default fetch behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {\n        var _len3,\n            args,\n            _key6,\n            current,\n            _args4 = arguments;\n\n        return _regenerator.default.wrap(function (_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                for (_len3 = _args4.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {\n                  args[_key6] = _args4[_key6];\n                }\n\n                _context4.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetch\", this).apply(this, args);\n\n              case 3:\n                _context4.next = 5;\n                return this.isCurrentAsync();\n\n              case 5:\n                current = _context4.sent;\n\n                if (!current) {\n                  _context4.next = 8;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n\n              case 8:\n                return _context4.abrupt(\"return\", this);\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function () {\n        return _fetch.apply(this, arguments);\n      };\n    }()\n    /**\n     * Wrap the default fetchWithInclude behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function () {\n      var _fetchWithInclude = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {\n        var _len4,\n            args,\n            _key7,\n            current,\n            _args5 = arguments;\n\n        return _regenerator.default.wrap(function (_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                for (_len4 = _args5.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {\n                  args[_key7] = _args5[_key7];\n                }\n\n                _context5.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetchWithInclude\", this).apply(this, args);\n\n              case 3:\n                _context5.next = 5;\n                return this.isCurrentAsync();\n\n              case 5:\n                current = _context5.sent;\n\n                if (!current) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n\n              case 8:\n                return _context5.abrupt(\"return\", this);\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function () {\n        return _fetchWithInclude.apply(this, arguments);\n      };\n    }()\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n\n  }, {\n    key: \"verifyPassword\",\n    value: function (password\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var username = this.getUsername() || '';\n      return ParseUser.verifyPassword(username, password, options);\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function () {\n      return ['sessionToken'];\n    }\n    /**\n     * Adds functionality to the existing Parse.User class.\n     *\n     * @param {object} protoProps A set of properties to add to the prototype\n     * @param {object} classProps A set of static properties to add to the class\n     * @static\n     * @returns {Parse.User} The newly extended Parse.User class\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (protoProps\n    /*: { [prop: string]: any }*/\n    , classProps\n    /*: { [prop: string]: any }*/\n    ) {\n      if (protoProps) {\n        for (var _prop in protoProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty.default)(ParseUser.prototype, _prop, {\n              value: protoProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop2 in classProps) {\n          if (_prop2 !== 'className') {\n            (0, _defineProperty.default)(ParseUser, _prop2, {\n              value: classProps[_prop2],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      return ParseUser;\n    }\n    /**\n     * Retrieves the currently logged in ParseUser with a valid session,\n     * either from memory or localStorage, if necessary.\n     *\n     * @static\n     * @returns {Parse.Object} The currently logged in Parse.User.\n     */\n\n  }, {\n    key: \"current\",\n    value: function ()\n    /*: ?ParseUser*/\n    {\n      if (!canUseCurrentUser) {\n        return null;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUser();\n    }\n    /**\n     * Retrieves the currently logged in ParseUser from asynchronous Storage.\n     *\n     * @static\n     * @returns {Promise} A Promise that is resolved with the currently\n     *   logged in Parse User\n     */\n\n  }, {\n    key: \"currentAsync\",\n    value: function ()\n    /*: Promise<?ParseUser>*/\n    {\n      if (!canUseCurrentUser) {\n        return _promise.default.resolve(null);\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUserAsync();\n    }\n    /**\n     * Signs up a new user with a username (or email) and password.\n     * This will create a new Parse.User on the server, and also persist the\n     * session in localStorage so that you can access the user using\n     * {@link #current}.\n     *\n     * @param {string} username The username (or email) to sign up with.\n     * @param {string} password The password to sign up with.\n     * @param {object} attrs Extra fields to set on the new user.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the signup completes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      attrs = attrs || {};\n      attrs.username = username;\n      attrs.password = password;\n      var user = new this(attrs);\n      return user.signUp({}, options);\n    }\n    /**\n     * Logs in a user with a username (or email) and password. On success, this\n     * saves the session to disk, so you can retrieve the currently logged in\n     * user using <code>current</code>.\n     *\n     * @param {string} username The username (or email) to log in with.\n     * @param {string} password The password to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      } else if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      var user = new this();\n\n      user._finishFetch({\n        username: username,\n        password: password\n      });\n\n      return user.logIn(options);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * @param {string} sessionToken The sessionToken to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"become\",\n    value: function (sessionToken\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (!canUseCurrentUser) {\n        throw new Error('It is not memory-safe to become a user in a server environment');\n      }\n\n      options = options || {};\n      var becomeOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        becomeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.become(user, becomeOptions);\n    }\n    /**\n     * Retrieves a user with a session token.\n     *\n     * @param {string} sessionToken The sessionToken to get user with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user is fetched.\n     */\n\n  }, {\n    key: \"me\",\n    value: function (sessionToken\n    /*: string*/\n    ) {\n      var options\n      /*:: ?: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      var meOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.useMasterKey) {\n        meOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var user = new this();\n      return controller.me(user, meOptions);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>. If there is no session token the user will not logged in.\n     *\n     * @param {object} userJSON The JSON map of the User's data\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"hydrate\",\n    value: function (userJSON\n    /*: AttributeMap*/\n    ) {\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.hydrate(user, userJSON);\n    }\n    /**\n     * Static version of {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     *\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Logs out the currently logged in user session. This will remove the\n     * session from disk, log out of linked services, and future calls to\n     * <code>current</code> will return <code>null</code>.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the session is\n     *   destroyed on the server.\n     */\n\n  }, {\n    key: \"logOut\",\n    value: function () {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logOut(options);\n    }\n    /**\n     * Requests a password reset email to be sent to the specified email address\n     * associated with the user account. This email allows the user to securely\n     * reset their password on the Parse site.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestPasswordReset\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestPasswordReset(email, requestOptions);\n    }\n    /**\n     * Request an email verification.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestEmailVerification\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestEmailVerification(email, requestOptions);\n    }\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} username  A username to be used for identificaiton\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n\n  }, {\n    key: \"verifyPassword\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      }\n\n      if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      options = options || {};\n      var verificationOption = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        verificationOption.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.verifyPassword(username, password, verificationOption);\n    }\n    /**\n     * Allow someone to define a custom User class without className\n     * being rewritten to _User. The default behavior is to rewrite\n     * User to _User for legacy reasons. This allows developers to\n     * override that behavior.\n     *\n     * @param {boolean} isAllowed Whether or not to allow custom User class\n     * @static\n     */\n\n  }, {\n    key: \"allowCustomUserClass\",\n    value: function (isAllowed\n    /*: boolean*/\n    ) {\n      _CoreManager.default.set('PERFORM_USER_REWRITE', !isAllowed);\n    }\n    /**\n     * Allows a legacy application to start using revocable sessions. If the\n     * current session token is not revocable, a request will be made for a new,\n     * revocable session.\n     * It is not necessary to call this method from cloud code unless you are\n     * handling user signup or login from the server side. In a cloud code call,\n     * this function will not attempt to upgrade the current token.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the process has\n     *   completed. If a replacement session token is requested, the promise\n     *   will be resolved after a new token has been fetched.\n     */\n\n  }, {\n    key: \"enableRevocableSession\",\n    value: function (options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n\n      _CoreManager.default.set('FORCE_REVOCABLE_SESSION', true);\n\n      if (canUseCurrentUser) {\n        var current = ParseUser.current();\n\n        if (current) {\n          return current._upgradeToRevocableSession(options);\n        }\n      }\n\n      return _promise.default.resolve();\n    }\n    /**\n     * Enables the use of become or the current user in a server\n     * environment. These features are disabled by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"enableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = true;\n    }\n    /**\n     * Disables the use of become or the current user in any environment.\n     * These features are disabled on servers by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"disableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = false;\n    }\n    /**\n     * When registering users with {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith} a basic auth provider\n     * is automatically created for you.\n     *\n     * For advanced authentication, you can register an Auth provider to\n     * implement custom authentication, deauthentication.\n     *\n     * @param provider\n     * @see {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @see {@link https://docs.parseplatform.org/js/guide/#custom-authentication-module Custom Authentication Module}\n     * @static\n     */\n\n  }, {\n    key: \"_registerAuthenticationProvider\",\n    value: function (provider\n    /*: any*/\n    ) {\n      authProviders[provider.getAuthType()] = provider; // Synchronize the current user with the auth provider.\n\n      ParseUser.currentAsync().then(function (current) {\n        if (current) {\n          current._synchronizeAuthData(provider.getAuthType());\n        }\n      });\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#logInWith logInWith}\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    ) {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n  }, {\n    key: \"_clearCache\",\n    value: function () {\n      currentUserCache = null;\n      currentUserCacheMatchesDisk = false;\n    }\n  }, {\n    key: \"_setCurrentUserCache\",\n    value: function (user\n    /*: ParseUser*/\n    ) {\n      currentUserCache = user;\n    }\n  }]);\n  return ParseUser;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_User', ParseUser);\n\nvar DefaultController = {\n  updateUserOnDisk: function (user) {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var json = user.toJSON();\n    delete json.password;\n    json.className = '_User';\n    var userData = (0, _stringify.default)(json);\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.encrypt(json, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    return _Storage.default.setItemAsync(path, userData).then(function () {\n      return user;\n    });\n  },\n  removeUserFromDisk: function () {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    currentUserCacheMatchesDisk = true;\n    currentUserCache = null;\n    return _Storage.default.removeItemAsync(path);\n  },\n  setCurrentUser: function (user) {\n    currentUserCache = user;\n\n    user._cleanupAuthData();\n\n    user._synchronizeAllAuthData();\n\n    return DefaultController.updateUserOnDisk(user);\n  },\n  currentUser: function ()\n  /*: ?ParseUser*/\n  {\n    if (currentUserCache) {\n      return currentUserCache;\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return null;\n    }\n\n    if (_Storage.default.async()) {\n      throw new Error('Cannot call currentUser() when using a platform with an async ' + 'storage system. Call currentUserAsync() instead.');\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var userData = _Storage.default.getItem(path);\n\n    currentUserCacheMatchesDisk = true;\n\n    if (!userData) {\n      currentUserCache = null;\n      return null;\n    }\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.decrypt(userData, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    userData = JSON.parse(userData);\n\n    if (!userData.className) {\n      userData.className = '_User';\n    }\n\n    if (userData._id) {\n      if (userData.objectId !== userData._id) {\n        userData.objectId = userData._id;\n      }\n\n      delete userData._id;\n    }\n\n    if (userData._sessionToken) {\n      userData.sessionToken = userData._sessionToken;\n      delete userData._sessionToken;\n    }\n\n    var current = _ParseObject2.default.fromJSON(userData);\n\n    currentUserCache = current;\n\n    current._synchronizeAllAuthData();\n\n    return current;\n  },\n  currentUserAsync: function ()\n  /*: Promise<?ParseUser>*/\n  {\n    if (currentUserCache) {\n      return _promise.default.resolve(currentUserCache);\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return _promise.default.resolve(null);\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    return _Storage.default.getItemAsync(path).then(function (userData) {\n      currentUserCacheMatchesDisk = true;\n\n      if (!userData) {\n        currentUserCache = null;\n        return _promise.default.resolve(null);\n      }\n\n      if (_CoreManager.default.get('ENCRYPTED_USER')) {\n        var crypto = _CoreManager.default.getCryptoController();\n\n        userData = crypto.decrypt(userData.toString(), _CoreManager.default.get('ENCRYPTED_KEY'));\n      }\n\n      userData = JSON.parse(userData);\n\n      if (!userData.className) {\n        userData.className = '_User';\n      }\n\n      if (userData._id) {\n        if (userData.objectId !== userData._id) {\n          userData.objectId = userData._id;\n        }\n\n        delete userData._id;\n      }\n\n      if (userData._sessionToken) {\n        userData.sessionToken = userData._sessionToken;\n        delete userData._sessionToken;\n      }\n\n      var current = _ParseObject2.default.fromJSON(userData);\n\n      currentUserCache = current;\n\n      current._synchronizeAllAuthData();\n\n      return _promise.default.resolve(current);\n    });\n  },\n  signUp: function (user\n  /*: ParseUser*/\n  , attrs\n  /*: AttributeMap*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var username = attrs && attrs.username || user.get('username');\n    var password = attrs && attrs.password || user.get('password');\n\n    if (!username || !username.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty username.'));\n    }\n\n    if (!password || !password.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty password.'));\n    }\n\n    return user.save(attrs, options).then(function () {\n      // Clear the password field\n      user._finishFetch({\n        password: undefined\n      });\n\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  logIn: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    var auth = {\n      username: user.get('username'),\n      password: user.get('password')\n    };\n    return RESTController.request(options.usePost ? 'POST' : 'GET', 'login', auth, options).then(function (response) {\n      user._migrateId(response.objectId);\n\n      user._setExisted(true);\n\n      stateController.setPendingOp(user._getStateIdentifier(), 'username', undefined);\n      stateController.setPendingOp(user._getStateIdentifier(), 'password', undefined);\n      response.password = undefined;\n\n      user._finishFetch(response);\n\n      if (!canUseCurrentUser) {\n        // We can't set the current user, so just return the one we logged in\n        return _promise.default.resolve(user);\n      }\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  become: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  hydrate: function (user\n  /*: ParseUser*/\n  , userJSON\n  /*: AttributeMap*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    user._finishFetch(userJSON);\n\n    user._setExisted(true);\n\n    if (userJSON.sessionToken && canUseCurrentUser) {\n      return DefaultController.setCurrentUser(user);\n    } else {\n      return _promise.default.resolve(user);\n    }\n  },\n  me: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return user;\n    });\n  },\n  logOut: function (options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    if (options.sessionToken) {\n      return RESTController.request('POST', 'logout', {}, options);\n    }\n\n    return DefaultController.currentUserAsync().then(function (currentUser) {\n      var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n      var promise = _Storage.default.removeItemAsync(path);\n\n      if (currentUser !== null) {\n        var currentSession = currentUser.getSessionToken();\n\n        if (currentSession && (0, _isRevocableSession.default)(currentSession)) {\n          promise = promise.then(function () {\n            return RESTController.request('POST', 'logout', {}, {\n              sessionToken: currentSession\n            });\n          });\n        }\n\n        currentUser._logOutWithAll();\n\n        currentUser._finishFetch({\n          sessionToken: undefined\n        });\n      }\n\n      currentUserCacheMatchesDisk = true;\n      currentUserCache = null;\n      return promise;\n    });\n  },\n  requestPasswordReset: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'requestPasswordReset', {\n      email: email\n    }, options);\n  },\n  upgradeToRevocableSession: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {\n      var token, RESTController, result, session, current;\n      return _regenerator.default.wrap(function (_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              token = user.getSessionToken();\n\n              if (token) {\n                _context6.next = 3;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", _promise.default.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, 'Cannot upgrade a user with no session token')));\n\n            case 3:\n              options.sessionToken = token;\n              RESTController = _CoreManager.default.getRESTController();\n              _context6.next = 7;\n              return RESTController.request('POST', 'upgradeToRevocableSession', {}, options);\n\n            case 7:\n              result = _context6.sent;\n              session = new _ParseSession.default();\n\n              session._finishFetch(result);\n\n              user._finishFetch({\n                sessionToken: session.getSessionToken()\n              });\n\n              _context6.next = 13;\n              return user.isCurrentAsync();\n\n            case 13:\n              current = _context6.sent;\n\n              if (!current) {\n                _context6.next = 16;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", DefaultController.setCurrentUser(user));\n\n            case 16:\n              return _context6.abrupt(\"return\", _promise.default.resolve(user));\n\n            case 17:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }))();\n  },\n  linkWith: function (user\n  /*: ParseUser*/\n  , authData\n  /*: AuthData*/\n  , options\n  /*: FullOptions*/\n  ) {\n    return user.save({\n      authData: authData\n    }, options).then(function () {\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  verifyPassword: function (username\n  /*: string*/\n  , password\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'verifyPassword', {\n      username: username,\n      password: password\n    }, options);\n  },\n  requestEmailVerification: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'verificationEmailRequest', {\n      email: email\n    }, options);\n  }\n};\n\n_CoreManager.default.setUserController(DefaultController);\n\nvar _default = ParseUser;\nexports.default = _default;","map":{"version":3,"sources":["/home/phy/portfolio/node_modules/parse/lib/browser/ParseUser.js"],"names":["_interopRequireDefault","require","_Object$defineProperty2","_Reflect$construct","exports","value","default","_stringify","_defineProperty","_regenerator","_asyncToGenerator2","_promise","_typeof2","_classCallCheck2","_createClass2","_get2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_CoreManager","_isRevocableSession","_ParseError","_ParseObject2","_ParseSession","_Storage","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","Super","result","NewTarget","constructor","arguments","apply","Reflect","sham","Proxy","Boolean","prototype","valueOf","call","e","CURRENT_USER_KEY","canUseCurrentUser","get","currentUserCacheMatchesDisk","currentUserCache","authProviders","ParseUser","_ParseObject","_super","attributes","_this","set","Error","key","options","upgradeOptions","hasOwnProperty","useMasterKey","controller","getUserController","upgradeToRevocableSession","provider","_this2","saveOpts","length","undefined","sessionToken","getSessionToken","authType","authProvider","restoreAuthentication","getAuthType","authData","linkWith","resolve","reject","authenticate","success","opts","then","error","_error","isCurrent","_unlinkFrom","_key","_synchronizeAuthData","_key2","_this3","_key3","_logOutWith","deauthenticate","current","id","_isCurrentAsync","mark","_callee","wrap","_context","prev","next","currentAsync","sent","abrupt","stop","username","anonymous","password","email","token","attrs","signupOptions","installationId","signUp","loginOptions","usePost","logIn","_save","_callee2","_len","args","_key4","_args2","_context2","Array","isCurrentAsync","updateUserOnDisk","_destroy","_callee3","_len2","_key5","_args3","_context3","removeUserFromDisk","_fetch","_callee4","_len3","_key6","_args4","_context4","_fetchWithInclude","_callee5","_len4","_key7","_args5","_context5","getUsername","verifyPassword","protoProps","classProps","_prop","enumerable","writable","configurable","_prop2","currentUser","currentUserAsync","user","OTHER_CAUSE","_finishFetch","becomeOptions","become","meOptions","me","userJSON","hydrate","logOut","requestOptions","requestPasswordReset","requestEmailVerification","verificationOption","isAllowed","_upgradeToRevocableSession","registerSubclass","DefaultController","path","generatePath","json","toJSON","className","userData","crypto","getCryptoController","encrypt","setItemAsync","removeItemAsync","setCurrentUser","_cleanupAuthData","_synchronizeAllAuthData","async","getItem","decrypt","JSON","parse","_id","objectId","_sessionToken","fromJSON","getItemAsync","toString","save","RESTController","getRESTController","stateController","getObjectStateController","auth","request","response","_migrateId","_setExisted","setPendingOp","_getStateIdentifier","promise","currentSession","_logOutWithAll","_callee6","session","_context6","SESSION_MISSING","setUserController","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseSession = _interopRequireDefault(require(\"./ParseSession\"));\n\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar CURRENT_USER_KEY = 'currentUser';\nvar canUseCurrentUser = !_CoreManager.default.get('IS_NODE');\nvar currentUserCacheMatchesDisk = false;\nvar currentUserCache = null;\nvar authProviders = {};\n/**\n * <p>A Parse.User object is a local representation of a user persisted to the\n * Parse cloud. This class is a subclass of a Parse.Object, and retains the\n * same functionality of a Parse.Object, but also extends it with various\n * user specific methods, like authentication, signing up, and validation of\n * uniqueness.</p>\n *\n * @alias Parse.User\n * @augments Parse.Object\n */\n\nvar ParseUser = /*#__PURE__*/function (_ParseObject) {\n  (0, _inherits2.default)(ParseUser, _ParseObject);\n\n  var _super = _createSuper(ParseUser);\n  /**\n   * @param {object} attributes The initial set of data to store in the user.\n   */\n\n\n  function ParseUser(attributes\n  /*: ?AttributeMap*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseUser);\n    _this = _super.call(this, '_User');\n\n    if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error(\"Can't create an invalid Parse User\");\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * Request a revocable session token to replace the older style of token.\n   *\n   * @param {object} options\n   * @returns {Promise} A promise that is resolved when the replacement\n   *   token has been fetched.\n   */\n\n\n  (0, _createClass2.default)(ParseUser, [{\n    key: \"_upgradeToRevocableSession\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      options = options || {};\n      var upgradeOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        upgradeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.upgradeToRevocableSession(this, upgradeOptions);\n    }\n    /**\n     * Parse allows you to link your users with {@link https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication 3rd party authentication}, enabling\n     * your users to sign up or log into your application using their existing identities.\n     * Since 2.9.0\n     *\n     * @see {@link https://docs.parseplatform.org/js/guide/#linking-users Linking Users}\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options\n     * <ul>\n     *   <li>If provider is string, options is {@link http://docs.parseplatform.org/parse-server/guide/#supported-3rd-party-authentications authData}\n     *   <li>If provider is AuthProvider, options is saveOpts\n     * </ul>\n     * @param {object} saveOpts useMasterKey / sessionToken\n     * @returns {Promise} A promise that is fulfilled with the user is linked\n     */\n\n  }, {\n    key: \"linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this2 = this;\n\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      saveOpts.sessionToken = saveOpts.sessionToken || this.getSessionToken() || '';\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n\n        if (authProviders[provider]) {\n          provider = authProviders[provider];\n        } else {\n          var authProvider = {\n            restoreAuthentication: function () {\n              return true;\n            },\n            getAuthType: function () {\n              return authType;\n            }\n          };\n          authProviders[authProvider.getAuthType()] = authProvider;\n          provider = authProvider;\n        }\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      if (options && options.hasOwnProperty('authData')) {\n        var authData = this.get('authData') || {};\n\n        if ((0, _typeof2.default)(authData) !== 'object') {\n          throw new Error('Invalid type: authData field should be an object');\n        }\n\n        authData[authType] = options.authData;\n\n        var controller = _CoreManager.default.getUserController();\n\n        return controller.linkWith(this, authData, saveOpts);\n      } else {\n        return new _promise.default(function (resolve, reject) {\n          provider.authenticate({\n            success: function (provider, result) {\n              var opts = {};\n              opts.authData = result;\n\n              _this2.linkWith(provider, opts, saveOpts).then(function () {\n                resolve(_this2);\n              }, function (error) {\n                reject(error);\n              });\n            },\n            error: function (provider, _error) {\n              reject(_error);\n            }\n          });\n        });\n      }\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Synchronizes auth data for a provider (e.g. puts the access token in the\n     * right place to be used by the Facebook SDK).\n     *\n     * @param provider\n     */\n\n  }, {\n    key: \"_synchronizeAuthData\",\n    value: function (provider\n    /*: string*/\n    ) {\n      if (!this.isCurrent() || !provider) {\n        return;\n      }\n\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n        provider = authProviders[authType];\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData');\n\n      if (!provider || !authData || (0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      var success = provider.restoreAuthentication(authData[authType]);\n\n      if (!success) {\n        this._unlinkFrom(provider);\n      }\n    }\n    /**\n     * Synchronizes authData for all providers.\n     */\n\n  }, {\n    key: \"_synchronizeAllAuthData\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key in authData) {\n        this._synchronizeAuthData(_key);\n      }\n    }\n    /**\n     * Removes null values from authData (which exist temporarily for unlinking)\n     */\n\n  }, {\n    key: \"_cleanupAuthData\",\n    value: function () {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key2 in authData) {\n        if (!authData[_key2]) {\n          delete authData[_key2];\n        }\n      }\n    }\n    /**\n     * Unlinks a user from a service.\n     *\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options MasterKey / SessionToken\n     * @returns {Promise} A promise that is fulfilled when the unlinking\n     *     finishes.\n     */\n\n  }, {\n    key: \"_unlinkFrom\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this3 = this;\n\n      return this.linkWith(provider, {\n        authData: null\n      }, options).then(function () {\n        _this3._synchronizeAuthData(provider);\n\n        return _promise.default.resolve(_this3);\n      });\n    }\n    /**\n     * Checks whether a user is linked to a service.\n     *\n     * @param {object} provider service to link to\n     * @returns {boolean} true if link was successful\n     */\n\n  }, {\n    key: \"_isLinked\",\n    value: function (provider\n    /*: any*/\n    )\n    /*: boolean*/\n    {\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData') || {};\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return false;\n      }\n\n      return !!authData[authType];\n    }\n    /**\n     * Deauthenticates all providers.\n     */\n\n  }, {\n    key: \"_logOutWithAll\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key3 in authData) {\n        this._logOutWith(_key3);\n      }\n    }\n    /**\n     * Deauthenticates a single provider (e.g. removing access tokens from the\n     * Facebook SDK).\n     *\n     * @param {object} provider service to logout of\n     */\n\n  }, {\n    key: \"_logOutWith\",\n    value: function (provider\n    /*: any*/\n    ) {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      if (typeof provider === 'string') {\n        provider = authProviders[provider];\n      }\n\n      if (provider && provider.deauthenticate) {\n        provider.deauthenticate();\n      }\n    }\n    /**\n     * Class instance method used to maintain specific keys when a fetch occurs.\n     * Used to ensure that the session token is not lost.\n     *\n     * @returns {object} sessionToken\n     */\n\n  }, {\n    key: \"_preserveFieldsOnFetch\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      return {\n        sessionToken: this.get('sessionToken')\n      };\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {boolean} true if user is cached on disk\n     */\n\n  }, {\n    key: \"isCurrent\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!current && current.id === this.id;\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {Promise<boolean>} true if user is cached on disk\n     */\n\n  }, {\n    key: \"isCurrentAsync\",\n    value: function () {\n      var _isCurrentAsync = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n        var current;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return ParseUser.currentAsync();\n\n              case 2:\n                current = _context.sent;\n                return _context.abrupt(\"return\", !!current && current.id === this.id);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function () {\n        return _isCurrentAsync.apply(this, arguments);\n      };\n    }()\n    /**\n     * Returns get(\"username\").\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getUsername\",\n    value: function ()\n    /*: ?string*/\n    {\n      var username = this.get('username');\n\n      if (username == null || typeof username === 'string') {\n        return username;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"username\", username, options) and returns the result.\n     *\n     * @param {string} username\n     */\n\n  }, {\n    key: \"setUsername\",\n    value: function (username\n    /*: string*/\n    ) {\n      // Strip anonymity\n      var authData = this.get('authData');\n\n      if (authData && (0, _typeof2.default)(authData) === 'object' && authData.hasOwnProperty('anonymous')) {\n        // We need to set anonymous to null instead of deleting it in order to remove it from Parse.\n        authData.anonymous = null;\n      }\n\n      this.set('username', username);\n    }\n    /**\n     * Calls set(\"password\", password, options) and returns the result.\n     *\n     * @param {string} password User's Password\n     */\n\n  }, {\n    key: \"setPassword\",\n    value: function (password\n    /*: string*/\n    ) {\n      this.set('password', password);\n    }\n    /**\n     * Returns get(\"email\").\n     *\n     * @returns {string} User's Email\n     */\n\n  }, {\n    key: \"getEmail\",\n    value: function ()\n    /*: ?string*/\n    {\n      var email = this.get('email');\n\n      if (email == null || typeof email === 'string') {\n        return email;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"email\", email) and returns the result.\n     *\n     * @param {string} email\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"setEmail\",\n    value: function (email\n    /*: string*/\n    ) {\n      return this.set('email', email);\n    }\n    /**\n     * Returns the session token for this user, if the user has been logged in,\n     * or if it is the result of a query with the master key. Otherwise, returns\n     * undefined.\n     *\n     * @returns {string} the session token, or undefined\n     */\n\n  }, {\n    key: \"getSessionToken\",\n    value: function ()\n    /*: ?string*/\n    {\n      var token = this.get('sessionToken');\n\n      if (token == null || typeof token === 'string') {\n        return token;\n      }\n\n      return '';\n    }\n    /**\n     * Checks whether this user is the current user and has been authenticated.\n     *\n     * @returns {boolean} whether this user is the current user and is logged in.\n     */\n\n  }, {\n    key: \"authenticated\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!this.get('sessionToken') && !!current && current.id === this.id;\n    }\n    /**\n     * Signs up a new user. You should call this instead of save for\n     * new Parse.Users. This will create a new Parse.User on the server, and\n     * also persist the session on disk so that you can access the user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling signUp.</p>\n     *\n     * @param {object} attrs Extra fields to set on the new user, or null.\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled when the signup\n     *     finishes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var signupOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        signupOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        signupOptions.installationId = options.installationId;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.signUp(this, attrs, signupOptions);\n    }\n    /**\n     * Logs in a Parse.User. On success, this saves the session to disk,\n     * so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling logIn.</p>\n     *\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login is complete.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var loginOptions = {\n        usePost: true\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        loginOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        loginOptions.installationId = options.installationId;\n      }\n\n      if (options.hasOwnProperty('usePost')) {\n        loginOptions.usePost = options.usePost;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logIn(this, loginOptions);\n    }\n    /**\n     * Wrap the default save behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {\n        var _len,\n            args,\n            _key4,\n            current,\n            _args2 = arguments;\n\n        return _regenerator.default.wrap(function (_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                for (_len = _args2.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {\n                  args[_key4] = _args2[_key4];\n                }\n\n                _context2.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"save\", this).apply(this, args);\n\n              case 3:\n                _context2.next = 5;\n                return this.isCurrentAsync();\n\n              case 5:\n                current = _context2.sent;\n\n                if (!current) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n\n              case 8:\n                return _context2.abrupt(\"return\", this);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function () {\n        return _save.apply(this, arguments);\n      };\n    }()\n    /**\n     * Wrap the default destroy behavior with functionality that logs out\n     * the current user when it is destroyed\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function () {\n      var _destroy = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n        var _len2,\n            args,\n            _key5,\n            current,\n            _args3 = arguments;\n\n        return _regenerator.default.wrap(function (_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                for (_len2 = _args3.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {\n                  args[_key5] = _args3[_key5];\n                }\n\n                _context3.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"destroy\", this).apply(this, args);\n\n              case 3:\n                _context3.next = 5;\n                return this.isCurrentAsync();\n\n              case 5:\n                current = _context3.sent;\n\n                if (!current) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", _CoreManager.default.getUserController().removeUserFromDisk());\n\n              case 8:\n                return _context3.abrupt(\"return\", this);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function () {\n        return _destroy.apply(this, arguments);\n      };\n    }()\n    /**\n     * Wrap the default fetch behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {\n        var _len3,\n            args,\n            _key6,\n            current,\n            _args4 = arguments;\n\n        return _regenerator.default.wrap(function (_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                for (_len3 = _args4.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {\n                  args[_key6] = _args4[_key6];\n                }\n\n                _context4.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetch\", this).apply(this, args);\n\n              case 3:\n                _context4.next = 5;\n                return this.isCurrentAsync();\n\n              case 5:\n                current = _context4.sent;\n\n                if (!current) {\n                  _context4.next = 8;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n\n              case 8:\n                return _context4.abrupt(\"return\", this);\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function () {\n        return _fetch.apply(this, arguments);\n      };\n    }()\n    /**\n     * Wrap the default fetchWithInclude behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function () {\n      var _fetchWithInclude = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {\n        var _len4,\n            args,\n            _key7,\n            current,\n            _args5 = arguments;\n\n        return _regenerator.default.wrap(function (_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                for (_len4 = _args5.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {\n                  args[_key7] = _args5[_key7];\n                }\n\n                _context5.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetchWithInclude\", this).apply(this, args);\n\n              case 3:\n                _context5.next = 5;\n                return this.isCurrentAsync();\n\n              case 5:\n                current = _context5.sent;\n\n                if (!current) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n\n              case 8:\n                return _context5.abrupt(\"return\", this);\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function () {\n        return _fetchWithInclude.apply(this, arguments);\n      };\n    }()\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n\n  }, {\n    key: \"verifyPassword\",\n    value: function (password\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var username = this.getUsername() || '';\n      return ParseUser.verifyPassword(username, password, options);\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function () {\n      return ['sessionToken'];\n    }\n    /**\n     * Adds functionality to the existing Parse.User class.\n     *\n     * @param {object} protoProps A set of properties to add to the prototype\n     * @param {object} classProps A set of static properties to add to the class\n     * @static\n     * @returns {Parse.User} The newly extended Parse.User class\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (protoProps\n    /*: { [prop: string]: any }*/\n    , classProps\n    /*: { [prop: string]: any }*/\n    ) {\n      if (protoProps) {\n        for (var _prop in protoProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty.default)(ParseUser.prototype, _prop, {\n              value: protoProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop2 in classProps) {\n          if (_prop2 !== 'className') {\n            (0, _defineProperty.default)(ParseUser, _prop2, {\n              value: classProps[_prop2],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      return ParseUser;\n    }\n    /**\n     * Retrieves the currently logged in ParseUser with a valid session,\n     * either from memory or localStorage, if necessary.\n     *\n     * @static\n     * @returns {Parse.Object} The currently logged in Parse.User.\n     */\n\n  }, {\n    key: \"current\",\n    value: function ()\n    /*: ?ParseUser*/\n    {\n      if (!canUseCurrentUser) {\n        return null;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUser();\n    }\n    /**\n     * Retrieves the currently logged in ParseUser from asynchronous Storage.\n     *\n     * @static\n     * @returns {Promise} A Promise that is resolved with the currently\n     *   logged in Parse User\n     */\n\n  }, {\n    key: \"currentAsync\",\n    value: function ()\n    /*: Promise<?ParseUser>*/\n    {\n      if (!canUseCurrentUser) {\n        return _promise.default.resolve(null);\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUserAsync();\n    }\n    /**\n     * Signs up a new user with a username (or email) and password.\n     * This will create a new Parse.User on the server, and also persist the\n     * session in localStorage so that you can access the user using\n     * {@link #current}.\n     *\n     * @param {string} username The username (or email) to sign up with.\n     * @param {string} password The password to sign up with.\n     * @param {object} attrs Extra fields to set on the new user.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the signup completes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      attrs = attrs || {};\n      attrs.username = username;\n      attrs.password = password;\n      var user = new this(attrs);\n      return user.signUp({}, options);\n    }\n    /**\n     * Logs in a user with a username (or email) and password. On success, this\n     * saves the session to disk, so you can retrieve the currently logged in\n     * user using <code>current</code>.\n     *\n     * @param {string} username The username (or email) to log in with.\n     * @param {string} password The password to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      } else if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      var user = new this();\n\n      user._finishFetch({\n        username: username,\n        password: password\n      });\n\n      return user.logIn(options);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * @param {string} sessionToken The sessionToken to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"become\",\n    value: function (sessionToken\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (!canUseCurrentUser) {\n        throw new Error('It is not memory-safe to become a user in a server environment');\n      }\n\n      options = options || {};\n      var becomeOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        becomeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.become(user, becomeOptions);\n    }\n    /**\n     * Retrieves a user with a session token.\n     *\n     * @param {string} sessionToken The sessionToken to get user with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user is fetched.\n     */\n\n  }, {\n    key: \"me\",\n    value: function (sessionToken\n    /*: string*/\n    ) {\n      var options\n      /*:: ?: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      var meOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.useMasterKey) {\n        meOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var user = new this();\n      return controller.me(user, meOptions);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>. If there is no session token the user will not logged in.\n     *\n     * @param {object} userJSON The JSON map of the User's data\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"hydrate\",\n    value: function (userJSON\n    /*: AttributeMap*/\n    ) {\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.hydrate(user, userJSON);\n    }\n    /**\n     * Static version of {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     *\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Logs out the currently logged in user session. This will remove the\n     * session from disk, log out of linked services, and future calls to\n     * <code>current</code> will return <code>null</code>.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the session is\n     *   destroyed on the server.\n     */\n\n  }, {\n    key: \"logOut\",\n    value: function () {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logOut(options);\n    }\n    /**\n     * Requests a password reset email to be sent to the specified email address\n     * associated with the user account. This email allows the user to securely\n     * reset their password on the Parse site.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestPasswordReset\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestPasswordReset(email, requestOptions);\n    }\n    /**\n     * Request an email verification.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestEmailVerification\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestEmailVerification(email, requestOptions);\n    }\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} username  A username to be used for identificaiton\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n\n  }, {\n    key: \"verifyPassword\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      }\n\n      if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      options = options || {};\n      var verificationOption = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        verificationOption.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.verifyPassword(username, password, verificationOption);\n    }\n    /**\n     * Allow someone to define a custom User class without className\n     * being rewritten to _User. The default behavior is to rewrite\n     * User to _User for legacy reasons. This allows developers to\n     * override that behavior.\n     *\n     * @param {boolean} isAllowed Whether or not to allow custom User class\n     * @static\n     */\n\n  }, {\n    key: \"allowCustomUserClass\",\n    value: function (isAllowed\n    /*: boolean*/\n    ) {\n      _CoreManager.default.set('PERFORM_USER_REWRITE', !isAllowed);\n    }\n    /**\n     * Allows a legacy application to start using revocable sessions. If the\n     * current session token is not revocable, a request will be made for a new,\n     * revocable session.\n     * It is not necessary to call this method from cloud code unless you are\n     * handling user signup or login from the server side. In a cloud code call,\n     * this function will not attempt to upgrade the current token.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the process has\n     *   completed. If a replacement session token is requested, the promise\n     *   will be resolved after a new token has been fetched.\n     */\n\n  }, {\n    key: \"enableRevocableSession\",\n    value: function (options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n\n      _CoreManager.default.set('FORCE_REVOCABLE_SESSION', true);\n\n      if (canUseCurrentUser) {\n        var current = ParseUser.current();\n\n        if (current) {\n          return current._upgradeToRevocableSession(options);\n        }\n      }\n\n      return _promise.default.resolve();\n    }\n    /**\n     * Enables the use of become or the current user in a server\n     * environment. These features are disabled by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"enableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = true;\n    }\n    /**\n     * Disables the use of become or the current user in any environment.\n     * These features are disabled on servers by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"disableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = false;\n    }\n    /**\n     * When registering users with {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith} a basic auth provider\n     * is automatically created for you.\n     *\n     * For advanced authentication, you can register an Auth provider to\n     * implement custom authentication, deauthentication.\n     *\n     * @param provider\n     * @see {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @see {@link https://docs.parseplatform.org/js/guide/#custom-authentication-module Custom Authentication Module}\n     * @static\n     */\n\n  }, {\n    key: \"_registerAuthenticationProvider\",\n    value: function (provider\n    /*: any*/\n    ) {\n      authProviders[provider.getAuthType()] = provider; // Synchronize the current user with the auth provider.\n\n      ParseUser.currentAsync().then(function (current) {\n        if (current) {\n          current._synchronizeAuthData(provider.getAuthType());\n        }\n      });\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#logInWith logInWith}\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    ) {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n  }, {\n    key: \"_clearCache\",\n    value: function () {\n      currentUserCache = null;\n      currentUserCacheMatchesDisk = false;\n    }\n  }, {\n    key: \"_setCurrentUserCache\",\n    value: function (user\n    /*: ParseUser*/\n    ) {\n      currentUserCache = user;\n    }\n  }]);\n  return ParseUser;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_User', ParseUser);\n\nvar DefaultController = {\n  updateUserOnDisk: function (user) {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var json = user.toJSON();\n    delete json.password;\n    json.className = '_User';\n    var userData = (0, _stringify.default)(json);\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.encrypt(json, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    return _Storage.default.setItemAsync(path, userData).then(function () {\n      return user;\n    });\n  },\n  removeUserFromDisk: function () {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    currentUserCacheMatchesDisk = true;\n    currentUserCache = null;\n    return _Storage.default.removeItemAsync(path);\n  },\n  setCurrentUser: function (user) {\n    currentUserCache = user;\n\n    user._cleanupAuthData();\n\n    user._synchronizeAllAuthData();\n\n    return DefaultController.updateUserOnDisk(user);\n  },\n  currentUser: function ()\n  /*: ?ParseUser*/\n  {\n    if (currentUserCache) {\n      return currentUserCache;\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return null;\n    }\n\n    if (_Storage.default.async()) {\n      throw new Error('Cannot call currentUser() when using a platform with an async ' + 'storage system. Call currentUserAsync() instead.');\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var userData = _Storage.default.getItem(path);\n\n    currentUserCacheMatchesDisk = true;\n\n    if (!userData) {\n      currentUserCache = null;\n      return null;\n    }\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.decrypt(userData, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    userData = JSON.parse(userData);\n\n    if (!userData.className) {\n      userData.className = '_User';\n    }\n\n    if (userData._id) {\n      if (userData.objectId !== userData._id) {\n        userData.objectId = userData._id;\n      }\n\n      delete userData._id;\n    }\n\n    if (userData._sessionToken) {\n      userData.sessionToken = userData._sessionToken;\n      delete userData._sessionToken;\n    }\n\n    var current = _ParseObject2.default.fromJSON(userData);\n\n    currentUserCache = current;\n\n    current._synchronizeAllAuthData();\n\n    return current;\n  },\n  currentUserAsync: function ()\n  /*: Promise<?ParseUser>*/\n  {\n    if (currentUserCache) {\n      return _promise.default.resolve(currentUserCache);\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return _promise.default.resolve(null);\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    return _Storage.default.getItemAsync(path).then(function (userData) {\n      currentUserCacheMatchesDisk = true;\n\n      if (!userData) {\n        currentUserCache = null;\n        return _promise.default.resolve(null);\n      }\n\n      if (_CoreManager.default.get('ENCRYPTED_USER')) {\n        var crypto = _CoreManager.default.getCryptoController();\n\n        userData = crypto.decrypt(userData.toString(), _CoreManager.default.get('ENCRYPTED_KEY'));\n      }\n\n      userData = JSON.parse(userData);\n\n      if (!userData.className) {\n        userData.className = '_User';\n      }\n\n      if (userData._id) {\n        if (userData.objectId !== userData._id) {\n          userData.objectId = userData._id;\n        }\n\n        delete userData._id;\n      }\n\n      if (userData._sessionToken) {\n        userData.sessionToken = userData._sessionToken;\n        delete userData._sessionToken;\n      }\n\n      var current = _ParseObject2.default.fromJSON(userData);\n\n      currentUserCache = current;\n\n      current._synchronizeAllAuthData();\n\n      return _promise.default.resolve(current);\n    });\n  },\n  signUp: function (user\n  /*: ParseUser*/\n  , attrs\n  /*: AttributeMap*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var username = attrs && attrs.username || user.get('username');\n    var password = attrs && attrs.password || user.get('password');\n\n    if (!username || !username.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty username.'));\n    }\n\n    if (!password || !password.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty password.'));\n    }\n\n    return user.save(attrs, options).then(function () {\n      // Clear the password field\n      user._finishFetch({\n        password: undefined\n      });\n\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  logIn: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    var auth = {\n      username: user.get('username'),\n      password: user.get('password')\n    };\n    return RESTController.request(options.usePost ? 'POST' : 'GET', 'login', auth, options).then(function (response) {\n      user._migrateId(response.objectId);\n\n      user._setExisted(true);\n\n      stateController.setPendingOp(user._getStateIdentifier(), 'username', undefined);\n      stateController.setPendingOp(user._getStateIdentifier(), 'password', undefined);\n      response.password = undefined;\n\n      user._finishFetch(response);\n\n      if (!canUseCurrentUser) {\n        // We can't set the current user, so just return the one we logged in\n        return _promise.default.resolve(user);\n      }\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  become: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  hydrate: function (user\n  /*: ParseUser*/\n  , userJSON\n  /*: AttributeMap*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    user._finishFetch(userJSON);\n\n    user._setExisted(true);\n\n    if (userJSON.sessionToken && canUseCurrentUser) {\n      return DefaultController.setCurrentUser(user);\n    } else {\n      return _promise.default.resolve(user);\n    }\n  },\n  me: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return user;\n    });\n  },\n  logOut: function (options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    if (options.sessionToken) {\n      return RESTController.request('POST', 'logout', {}, options);\n    }\n\n    return DefaultController.currentUserAsync().then(function (currentUser) {\n      var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n      var promise = _Storage.default.removeItemAsync(path);\n\n      if (currentUser !== null) {\n        var currentSession = currentUser.getSessionToken();\n\n        if (currentSession && (0, _isRevocableSession.default)(currentSession)) {\n          promise = promise.then(function () {\n            return RESTController.request('POST', 'logout', {}, {\n              sessionToken: currentSession\n            });\n          });\n        }\n\n        currentUser._logOutWithAll();\n\n        currentUser._finishFetch({\n          sessionToken: undefined\n        });\n      }\n\n      currentUserCacheMatchesDisk = true;\n      currentUserCache = null;\n      return promise;\n    });\n  },\n  requestPasswordReset: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'requestPasswordReset', {\n      email: email\n    }, options);\n  },\n  upgradeToRevocableSession: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {\n      var token, RESTController, result, session, current;\n      return _regenerator.default.wrap(function (_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              token = user.getSessionToken();\n\n              if (token) {\n                _context6.next = 3;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", _promise.default.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, 'Cannot upgrade a user with no session token')));\n\n            case 3:\n              options.sessionToken = token;\n              RESTController = _CoreManager.default.getRESTController();\n              _context6.next = 7;\n              return RESTController.request('POST', 'upgradeToRevocableSession', {}, options);\n\n            case 7:\n              result = _context6.sent;\n              session = new _ParseSession.default();\n\n              session._finishFetch(result);\n\n              user._finishFetch({\n                sessionToken: session.getSessionToken()\n              });\n\n              _context6.next = 13;\n              return user.isCurrentAsync();\n\n            case 13:\n              current = _context6.sent;\n\n              if (!current) {\n                _context6.next = 16;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", DefaultController.setCurrentUser(user));\n\n            case 16:\n              return _context6.abrupt(\"return\", _promise.default.resolve(user));\n\n            case 17:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }))();\n  },\n  linkWith: function (user\n  /*: ParseUser*/\n  , authData\n  /*: AuthData*/\n  , options\n  /*: FullOptions*/\n  ) {\n    return user.save({\n      authData: authData\n    }, options).then(function () {\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  verifyPassword: function (username\n  /*: string*/\n  , password\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'verifyPassword', {\n      username: username,\n      password: password\n    }, options);\n  },\n  requestEmailVerification: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'verificationEmailRequest', {\n      email: email\n    }, options);\n  }\n};\n\n_CoreManager.default.setUserController(DefaultController);\n\nvar _default = ParseUser;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}