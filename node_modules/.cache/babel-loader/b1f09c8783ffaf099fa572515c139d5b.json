{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs3/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _CryptoController = _interopRequireDefault(require(\"./CryptoController\"));\n\nvar _EventuallyQueue = _interopRequireDefault(require(\"./EventuallyQueue\"));\n\nvar _InstallationController = _interopRequireDefault(require(\"./InstallationController\"));\n\nvar ParseOp = _interopRequireWildcard(require(\"./ParseOp\"));\n\nvar _RESTController = _interopRequireDefault(require(\"./RESTController\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/**\n * Contains all Parse API classes and functions.\n *\n * @static\n * @global\n * @class\n * @hideconstructor\n */\n\n\nvar Parse = {\n  /**\n   * Call this method first to set up your authentication tokens for Parse.\n   *\n   * @param {string} applicationId Your Parse Application ID.\n   * @param {string} [javaScriptKey] Your Parse JavaScript Key (Not needed for parse-server)\n   * @param {string} [masterKey] Your Parse Master Key. (Node.js only!)\n   * @static\n   */\n  initialize: function (applicationId\n  /*: string*/\n  , javaScriptKey\n  /*: string*/\n  ) {\n    if (\"browser\" === 'browser' && _CoreManager.default.get('IS_NODE') && !process.env.SERVER_RENDERING) {\n      /* eslint-disable no-console */\n      console.log(\"It looks like you're using the browser version of the SDK in a \" + \"node.js environment. You should require('parse/node') instead.\");\n      /* eslint-enable no-console */\n    }\n\n    Parse._initialize(applicationId, javaScriptKey);\n\n    _EventuallyQueue.default.poll();\n  },\n  _initialize: function (applicationId\n  /*: string*/\n  , javaScriptKey\n  /*: string*/\n  , masterKey\n  /*: string*/\n  ) {\n    _CoreManager.default.set('APPLICATION_ID', applicationId);\n\n    _CoreManager.default.set('JAVASCRIPT_KEY', javaScriptKey);\n\n    _CoreManager.default.set('MASTER_KEY', masterKey);\n\n    _CoreManager.default.set('USE_MASTER_KEY', false);\n  },\n\n  /**\n   * Call this method to set your AsyncStorage engine\n   * Starting Parse@1.11, the ParseSDK do not provide a React AsyncStorage as the ReactNative module\n   * is not provided at a stable path and changes over versions.\n   *\n   * @param {AsyncStorage} storage a react native async storage.\n   * @static\n   */\n  setAsyncStorage: function (storage\n  /*: any*/\n  ) {\n    _CoreManager.default.setAsyncStorage(storage);\n  },\n\n  /**\n   * Call this method to set your LocalDatastoreStorage engine\n   * If using React-Native use {@link Parse.setAsyncStorage Parse.setAsyncStorage()}\n   *\n   * @param {LocalDatastoreController} controller a data storage.\n   * @static\n   */\n  setLocalDatastoreController: function (controller\n  /*: any*/\n  ) {\n    _CoreManager.default.setLocalDatastoreController(controller);\n  },\n\n  /**\n   * Returns information regarding the current server's health\n   *\n   * @returns {Promise}\n   * @static\n   */\n  getServerHealth: function () {\n    return _CoreManager.default.getRESTController().request('GET', 'health');\n  },\n\n  /**\n   * @member {string} Parse.applicationId\n   * @static\n   */\n  set applicationId(value) {\n    _CoreManager.default.set('APPLICATION_ID', value);\n  },\n\n  get applicationId() {\n    return _CoreManager.default.get('APPLICATION_ID');\n  },\n\n  /**\n   * @member {string} Parse.javaScriptKey\n   * @static\n   */\n  set javaScriptKey(value) {\n    _CoreManager.default.set('JAVASCRIPT_KEY', value);\n  },\n\n  get javaScriptKey() {\n    return _CoreManager.default.get('JAVASCRIPT_KEY');\n  },\n\n  /**\n   * @member {string} Parse.masterKey\n   * @static\n   */\n  set masterKey(value) {\n    _CoreManager.default.set('MASTER_KEY', value);\n  },\n\n  get masterKey() {\n    return _CoreManager.default.get('MASTER_KEY');\n  },\n\n  /**\n   * @member {string} Parse.serverURL\n   * @static\n   */\n  set serverURL(value) {\n    _CoreManager.default.set('SERVER_URL', value);\n  },\n\n  get serverURL() {\n    return _CoreManager.default.get('SERVER_URL');\n  },\n\n  /**\n   * @member {string} Parse.serverAuthToken\n   * @static\n   */\n  set serverAuthToken(value) {\n    _CoreManager.default.set('SERVER_AUTH_TOKEN', value);\n  },\n\n  get serverAuthToken() {\n    return _CoreManager.default.get('SERVER_AUTH_TOKEN');\n  },\n\n  /**\n   * @member {string} Parse.serverAuthType\n   * @static\n   */\n  set serverAuthType(value) {\n    _CoreManager.default.set('SERVER_AUTH_TYPE', value);\n  },\n\n  get serverAuthType() {\n    return _CoreManager.default.get('SERVER_AUTH_TYPE');\n  },\n\n  /**\n   * @member {string} Parse.liveQueryServerURL\n   * @static\n   */\n  set liveQueryServerURL(value) {\n    _CoreManager.default.set('LIVEQUERY_SERVER_URL', value);\n  },\n\n  get liveQueryServerURL() {\n    return _CoreManager.default.get('LIVEQUERY_SERVER_URL');\n  },\n\n  /**\n   * @member {string} Parse.encryptedUser\n   * @static\n   */\n  set encryptedUser(value) {\n    _CoreManager.default.set('ENCRYPTED_USER', value);\n  },\n\n  get encryptedUser() {\n    return _CoreManager.default.get('ENCRYPTED_USER');\n  },\n\n  /**\n   * @member {string} Parse.secret\n   * @static\n   */\n  set secret(value) {\n    _CoreManager.default.set('ENCRYPTED_KEY', value);\n  },\n\n  get secret() {\n    return _CoreManager.default.get('ENCRYPTED_KEY');\n  },\n\n  /**\n   * @member {boolean} Parse.idempotency\n   * @static\n   */\n  set idempotency(value) {\n    _CoreManager.default.set('IDEMPOTENCY', value);\n  },\n\n  get idempotency() {\n    return _CoreManager.default.get('IDEMPOTENCY');\n  },\n\n  /**\n   * @member {boolean} Parse.allowCustomObjectId\n   * @static\n   */\n  set allowCustomObjectId(value) {\n    _CoreManager.default.set('ALLOW_CUSTOM_OBJECT_ID', value);\n  },\n\n  get allowCustomObjectId() {\n    return _CoreManager.default.get('ALLOW_CUSTOM_OBJECT_ID');\n  }\n\n};\nParse.ACL = require('./ParseACL').default;\nParse.Analytics = require('./Analytics');\nParse.AnonymousUtils = require('./AnonymousUtils').default;\nParse.Cloud = require('./Cloud');\nParse.CLP = require('./ParseCLP').default;\nParse.CoreManager = require('./CoreManager');\nParse.Config = require('./ParseConfig').default;\nParse.Error = require('./ParseError').default;\nParse.EventuallyQueue = _EventuallyQueue.default;\nParse.FacebookUtils = require('./FacebookUtils').default;\nParse.File = require('./ParseFile').default;\nParse.GeoPoint = require('./ParseGeoPoint').default;\nParse.Polygon = require('./ParsePolygon').default;\nParse.Installation = require('./ParseInstallation').default;\nParse.LocalDatastore = require('./LocalDatastore');\nParse.Object = require('./ParseObject').default;\nParse.Op = {\n  Set: ParseOp.SetOp,\n  Unset: ParseOp.UnsetOp,\n  Increment: ParseOp.IncrementOp,\n  Add: ParseOp.AddOp,\n  Remove: ParseOp.RemoveOp,\n  AddUnique: ParseOp.AddUniqueOp,\n  Relation: ParseOp.RelationOp\n};\nParse.Push = require('./Push');\nParse.Query = require('./ParseQuery').default;\nParse.Relation = require('./ParseRelation').default;\nParse.Role = require('./ParseRole').default;\nParse.Schema = require('./ParseSchema').default;\nParse.Session = require('./ParseSession').default;\nParse.Storage = require('./Storage');\nParse.User = require('./ParseUser').default;\nParse.LiveQuery = require('./ParseLiveQuery').default;\nParse.LiveQueryClient = require('./LiveQueryClient').default;\nParse.IndexedDB = require('./IndexedDBStorageController');\n\nParse._request = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return _CoreManager.default.getRESTController().request.apply(null, args);\n};\n\nParse._ajax = function () {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return _CoreManager.default.getRESTController().ajax.apply(null, args);\n}; // We attempt to match the signatures of the legacy versions of these methods\n\n\nParse._decode = function (_, value) {\n  return (0, _decode.default)(value);\n};\n\nParse._encode = function (value, _, disallowObjects) {\n  return (0, _encode.default)(value, disallowObjects);\n};\n\nParse._getInstallationId = function () {\n  return _CoreManager.default.getInstallationController().currentInstallationId();\n};\n/**\n * Enable pinning in your application.\n * This must be called before your application can use pinning.\n *\n * @static\n */\n\n\nParse.enableLocalDatastore = function () {\n  Parse.LocalDatastore.isEnabled = true;\n};\n/**\n * Flag that indicates whether Local Datastore is enabled.\n *\n * @static\n * @returns {boolean}\n */\n\n\nParse.isLocalDatastoreEnabled = function () {\n  return Parse.LocalDatastore.isEnabled;\n};\n/**\n * Gets all contents from Local Datastore\n *\n * <pre>\n * await Parse.dumpLocalDatastore();\n * </pre>\n *\n * @static\n * @returns {object}\n */\n\n\nParse.dumpLocalDatastore = function () {\n  if (!Parse.LocalDatastore.isEnabled) {\n    console.log('Parse.enableLocalDatastore() must be called first'); // eslint-disable-line no-console\n\n    return _promise.default.resolve({});\n  } else {\n    return Parse.LocalDatastore._getAllContents();\n  }\n};\n/**\n * Enable the current user encryption.\n * This must be called before login any user.\n *\n * @static\n */\n\n\nParse.enableEncryptedUser = function () {\n  Parse.encryptedUser = true;\n};\n/**\n * Flag that indicates whether Encrypted User is enabled.\n *\n * @static\n * @returns {boolean}\n */\n\n\nParse.isEncryptedUserEnabled = function () {\n  return Parse.encryptedUser;\n};\n\n_CoreManager.default.setCryptoController(_CryptoController.default);\n\n_CoreManager.default.setInstallationController(_InstallationController.default);\n\n_CoreManager.default.setRESTController(_RESTController.default); // For legacy requires, of the form `var Parse = require('parse').Parse`\n\n\nParse.Parse = Parse;\nmodule.exports = Parse;","map":{"version":3,"sources":["/home/phy/portfolio/node_modules/parse/lib/browser/Parse.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","_promise","_decode","_encode","_CoreManager","_CryptoController","_EventuallyQueue","_InstallationController","ParseOp","_RESTController","Parse","initialize","applicationId","javaScriptKey","default","get","process","env","SERVER_RENDERING","console","log","_initialize","poll","masterKey","set","setAsyncStorage","storage","setLocalDatastoreController","controller","getServerHealth","getRESTController","request","value","serverURL","serverAuthToken","serverAuthType","liveQueryServerURL","encryptedUser","secret","idempotency","allowCustomObjectId","ACL","Analytics","AnonymousUtils","Cloud","CLP","CoreManager","Config","Error","EventuallyQueue","FacebookUtils","File","GeoPoint","Polygon","Installation","LocalDatastore","Object","Op","Set","SetOp","Unset","UnsetOp","Increment","IncrementOp","Add","AddOp","Remove","RemoveOp","AddUnique","AddUniqueOp","Relation","RelationOp","Push","Query","Role","Schema","Session","Storage","User","LiveQuery","LiveQueryClient","IndexedDB","_request","_len","arguments","length","args","Array","_key","apply","_ajax","_len2","_key2","ajax","_","disallowObjects","_getInstallationId","getInstallationController","currentInstallationId","enableLocalDatastore","isEnabled","isLocalDatastoreEnabled","dumpLocalDatastore","resolve","_getAllContents","enableEncryptedUser","isEncryptedUserEnabled","setCryptoController","setInstallationController","setRESTController","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs3/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _CryptoController = _interopRequireDefault(require(\"./CryptoController\"));\n\nvar _EventuallyQueue = _interopRequireDefault(require(\"./EventuallyQueue\"));\n\nvar _InstallationController = _interopRequireDefault(require(\"./InstallationController\"));\n\nvar ParseOp = _interopRequireWildcard(require(\"./ParseOp\"));\n\nvar _RESTController = _interopRequireDefault(require(\"./RESTController\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/**\n * Contains all Parse API classes and functions.\n *\n * @static\n * @global\n * @class\n * @hideconstructor\n */\n\n\nvar Parse = {\n  /**\n   * Call this method first to set up your authentication tokens for Parse.\n   *\n   * @param {string} applicationId Your Parse Application ID.\n   * @param {string} [javaScriptKey] Your Parse JavaScript Key (Not needed for parse-server)\n   * @param {string} [masterKey] Your Parse Master Key. (Node.js only!)\n   * @static\n   */\n  initialize: function (applicationId\n  /*: string*/\n  , javaScriptKey\n  /*: string*/\n  ) {\n    if (\"browser\" === 'browser' && _CoreManager.default.get('IS_NODE') && !process.env.SERVER_RENDERING) {\n      /* eslint-disable no-console */\n      console.log(\"It looks like you're using the browser version of the SDK in a \" + \"node.js environment. You should require('parse/node') instead.\");\n      /* eslint-enable no-console */\n    }\n\n    Parse._initialize(applicationId, javaScriptKey);\n\n    _EventuallyQueue.default.poll();\n  },\n  _initialize: function (applicationId\n  /*: string*/\n  , javaScriptKey\n  /*: string*/\n  , masterKey\n  /*: string*/\n  ) {\n    _CoreManager.default.set('APPLICATION_ID', applicationId);\n\n    _CoreManager.default.set('JAVASCRIPT_KEY', javaScriptKey);\n\n    _CoreManager.default.set('MASTER_KEY', masterKey);\n\n    _CoreManager.default.set('USE_MASTER_KEY', false);\n  },\n\n  /**\n   * Call this method to set your AsyncStorage engine\n   * Starting Parse@1.11, the ParseSDK do not provide a React AsyncStorage as the ReactNative module\n   * is not provided at a stable path and changes over versions.\n   *\n   * @param {AsyncStorage} storage a react native async storage.\n   * @static\n   */\n  setAsyncStorage: function (storage\n  /*: any*/\n  ) {\n    _CoreManager.default.setAsyncStorage(storage);\n  },\n\n  /**\n   * Call this method to set your LocalDatastoreStorage engine\n   * If using React-Native use {@link Parse.setAsyncStorage Parse.setAsyncStorage()}\n   *\n   * @param {LocalDatastoreController} controller a data storage.\n   * @static\n   */\n  setLocalDatastoreController: function (controller\n  /*: any*/\n  ) {\n    _CoreManager.default.setLocalDatastoreController(controller);\n  },\n\n  /**\n   * Returns information regarding the current server's health\n   *\n   * @returns {Promise}\n   * @static\n   */\n  getServerHealth: function () {\n    return _CoreManager.default.getRESTController().request('GET', 'health');\n  },\n\n  /**\n   * @member {string} Parse.applicationId\n   * @static\n   */\n  set applicationId(value) {\n    _CoreManager.default.set('APPLICATION_ID', value);\n  },\n\n  get applicationId() {\n    return _CoreManager.default.get('APPLICATION_ID');\n  },\n\n  /**\n   * @member {string} Parse.javaScriptKey\n   * @static\n   */\n  set javaScriptKey(value) {\n    _CoreManager.default.set('JAVASCRIPT_KEY', value);\n  },\n\n  get javaScriptKey() {\n    return _CoreManager.default.get('JAVASCRIPT_KEY');\n  },\n\n  /**\n   * @member {string} Parse.masterKey\n   * @static\n   */\n  set masterKey(value) {\n    _CoreManager.default.set('MASTER_KEY', value);\n  },\n\n  get masterKey() {\n    return _CoreManager.default.get('MASTER_KEY');\n  },\n\n  /**\n   * @member {string} Parse.serverURL\n   * @static\n   */\n  set serverURL(value) {\n    _CoreManager.default.set('SERVER_URL', value);\n  },\n\n  get serverURL() {\n    return _CoreManager.default.get('SERVER_URL');\n  },\n\n  /**\n   * @member {string} Parse.serverAuthToken\n   * @static\n   */\n  set serverAuthToken(value) {\n    _CoreManager.default.set('SERVER_AUTH_TOKEN', value);\n  },\n\n  get serverAuthToken() {\n    return _CoreManager.default.get('SERVER_AUTH_TOKEN');\n  },\n\n  /**\n   * @member {string} Parse.serverAuthType\n   * @static\n   */\n  set serverAuthType(value) {\n    _CoreManager.default.set('SERVER_AUTH_TYPE', value);\n  },\n\n  get serverAuthType() {\n    return _CoreManager.default.get('SERVER_AUTH_TYPE');\n  },\n\n  /**\n   * @member {string} Parse.liveQueryServerURL\n   * @static\n   */\n  set liveQueryServerURL(value) {\n    _CoreManager.default.set('LIVEQUERY_SERVER_URL', value);\n  },\n\n  get liveQueryServerURL() {\n    return _CoreManager.default.get('LIVEQUERY_SERVER_URL');\n  },\n\n  /**\n   * @member {string} Parse.encryptedUser\n   * @static\n   */\n  set encryptedUser(value) {\n    _CoreManager.default.set('ENCRYPTED_USER', value);\n  },\n\n  get encryptedUser() {\n    return _CoreManager.default.get('ENCRYPTED_USER');\n  },\n\n  /**\n   * @member {string} Parse.secret\n   * @static\n   */\n  set secret(value) {\n    _CoreManager.default.set('ENCRYPTED_KEY', value);\n  },\n\n  get secret() {\n    return _CoreManager.default.get('ENCRYPTED_KEY');\n  },\n\n  /**\n   * @member {boolean} Parse.idempotency\n   * @static\n   */\n  set idempotency(value) {\n    _CoreManager.default.set('IDEMPOTENCY', value);\n  },\n\n  get idempotency() {\n    return _CoreManager.default.get('IDEMPOTENCY');\n  },\n\n  /**\n   * @member {boolean} Parse.allowCustomObjectId\n   * @static\n   */\n  set allowCustomObjectId(value) {\n    _CoreManager.default.set('ALLOW_CUSTOM_OBJECT_ID', value);\n  },\n\n  get allowCustomObjectId() {\n    return _CoreManager.default.get('ALLOW_CUSTOM_OBJECT_ID');\n  }\n\n};\nParse.ACL = require('./ParseACL').default;\nParse.Analytics = require('./Analytics');\nParse.AnonymousUtils = require('./AnonymousUtils').default;\nParse.Cloud = require('./Cloud');\nParse.CLP = require('./ParseCLP').default;\nParse.CoreManager = require('./CoreManager');\nParse.Config = require('./ParseConfig').default;\nParse.Error = require('./ParseError').default;\nParse.EventuallyQueue = _EventuallyQueue.default;\nParse.FacebookUtils = require('./FacebookUtils').default;\nParse.File = require('./ParseFile').default;\nParse.GeoPoint = require('./ParseGeoPoint').default;\nParse.Polygon = require('./ParsePolygon').default;\nParse.Installation = require('./ParseInstallation').default;\nParse.LocalDatastore = require('./LocalDatastore');\nParse.Object = require('./ParseObject').default;\nParse.Op = {\n  Set: ParseOp.SetOp,\n  Unset: ParseOp.UnsetOp,\n  Increment: ParseOp.IncrementOp,\n  Add: ParseOp.AddOp,\n  Remove: ParseOp.RemoveOp,\n  AddUnique: ParseOp.AddUniqueOp,\n  Relation: ParseOp.RelationOp\n};\nParse.Push = require('./Push');\nParse.Query = require('./ParseQuery').default;\nParse.Relation = require('./ParseRelation').default;\nParse.Role = require('./ParseRole').default;\nParse.Schema = require('./ParseSchema').default;\nParse.Session = require('./ParseSession').default;\nParse.Storage = require('./Storage');\nParse.User = require('./ParseUser').default;\nParse.LiveQuery = require('./ParseLiveQuery').default;\nParse.LiveQueryClient = require('./LiveQueryClient').default;\nParse.IndexedDB = require('./IndexedDBStorageController');\n\nParse._request = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return _CoreManager.default.getRESTController().request.apply(null, args);\n};\n\nParse._ajax = function () {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return _CoreManager.default.getRESTController().ajax.apply(null, args);\n}; // We attempt to match the signatures of the legacy versions of these methods\n\n\nParse._decode = function (_, value) {\n  return (0, _decode.default)(value);\n};\n\nParse._encode = function (value, _, disallowObjects) {\n  return (0, _encode.default)(value, disallowObjects);\n};\n\nParse._getInstallationId = function () {\n  return _CoreManager.default.getInstallationController().currentInstallationId();\n};\n/**\n * Enable pinning in your application.\n * This must be called before your application can use pinning.\n *\n * @static\n */\n\n\nParse.enableLocalDatastore = function () {\n  Parse.LocalDatastore.isEnabled = true;\n};\n/**\n * Flag that indicates whether Local Datastore is enabled.\n *\n * @static\n * @returns {boolean}\n */\n\n\nParse.isLocalDatastoreEnabled = function () {\n  return Parse.LocalDatastore.isEnabled;\n};\n/**\n * Gets all contents from Local Datastore\n *\n * <pre>\n * await Parse.dumpLocalDatastore();\n * </pre>\n *\n * @static\n * @returns {object}\n */\n\n\nParse.dumpLocalDatastore = function () {\n  if (!Parse.LocalDatastore.isEnabled) {\n    console.log('Parse.enableLocalDatastore() must be called first'); // eslint-disable-line no-console\n\n    return _promise.default.resolve({});\n  } else {\n    return Parse.LocalDatastore._getAllContents();\n  }\n};\n/**\n * Enable the current user encryption.\n * This must be called before login any user.\n *\n * @static\n */\n\n\nParse.enableEncryptedUser = function () {\n  Parse.encryptedUser = true;\n};\n/**\n * Flag that indicates whether Encrypted User is enabled.\n *\n * @static\n * @returns {boolean}\n */\n\n\nParse.isEncryptedUserEnabled = function () {\n  return Parse.encryptedUser;\n};\n\n_CoreManager.default.setCryptoController(_CryptoController.default);\n\n_CoreManager.default.setInstallationController(_InstallationController.default);\n\n_CoreManager.default.setRESTController(_RESTController.default);\n\n// For legacy requires, of the form `var Parse = require('parse').Parse`\nParse.Parse = Parse;\nmodule.exports = Parse;"]},"metadata":{},"sourceType":"script"}