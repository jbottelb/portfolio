{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.send = send;\nexports.getPushStatus = getPushStatus;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Contains functions to deal with Push in Parse.\n *\n * @class Parse.Push\n * @static\n * @hideconstructor\n */\n\n/**\n * Sends a push notification.\n * **Available in Cloud Code only.**\n *\n * See {@link https://docs.parseplatform.org/js/guide/#push-notifications Push Notification Guide}\n *\n * @function send\n * @name Parse.Push.send\n * @param {object} data -  The data of the push notification. Valid fields\n * are:\n *   <ol>\n *     <li>channels - An Array of channels to push to.</li>\n *     <li>push_time - A Date object for when to send the push.</li>\n *     <li>expiration_time -  A Date object for when to expire\n *         the push.</li>\n *     <li>expiration_interval - The seconds from now to expire the push.</li>\n *     <li>where - A Parse.Query over Parse.Installation that is used to match\n *         a set of installations to push to.</li>\n *     <li>data - The data to send as part of the push.</li>\n *   <ol>\n * @param {object} options Valid options\n * are:<ul>\n *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n *     be used for this request.\n * </ul>\n * @returns {Promise} A promise that is fulfilled when the push request\n *     completes.\n */\n\n\nfunction send(data\n/*: PushData*/\n)\n/*: Promise*/\n{\n  var options\n  /*:: ?: FullOptions*/\n  = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (data.where && data.where instanceof _ParseQuery.default) {\n    data.where = data.where.toJSON().where;\n  }\n\n  if (data.push_time && (0, _typeof2.default)(data.push_time) === 'object') {\n    data.push_time = data.push_time.toJSON();\n  }\n\n  if (data.expiration_time && (0, _typeof2.default)(data.expiration_time) === 'object') {\n    data.expiration_time = data.expiration_time.toJSON();\n  }\n\n  if (data.expiration_time && data.expiration_interval) {\n    throw new Error('expiration_time and expiration_interval cannot both be set.');\n  }\n\n  var pushOptions = {\n    useMasterKey: true\n  };\n\n  if (options.hasOwnProperty('useMasterKey')) {\n    pushOptions.useMasterKey = options.useMasterKey;\n  }\n\n  return _CoreManager.default.getPushController().send(data, pushOptions);\n}\n/**\n * Gets push status by Id\n *\n * @function getPushStatus\n * @name Parse.Push.getPushStatus\n * @param {string} pushStatusId The Id of Push Status.\n * @param {object} options Valid options\n * are:<ul>\n *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n *     be used for this request.\n * </ul>\n * @returns {Parse.Object} Status of Push.\n */\n\n\nfunction getPushStatus(pushStatusId\n/*: string*/\n)\n/*: Promise<string>*/\n{\n  var options\n  /*:: ?: FullOptions*/\n  = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var pushOptions = {\n    useMasterKey: true\n  };\n\n  if (options.hasOwnProperty('useMasterKey')) {\n    pushOptions.useMasterKey = options.useMasterKey;\n  }\n\n  var query = new _ParseQuery.default('_PushStatus');\n  return query.get(pushStatusId, pushOptions);\n}\n\nvar DefaultController = {\n  send: function (data\n  /*: PushData*/\n  , options\n  /*:: ?: FullOptions*/\n  ) {\n    return _CoreManager.default.getRESTController().request('POST', 'push', data, options);\n  }\n};\n\n_CoreManager.default.setPushController(DefaultController);","map":{"version":3,"sources":["/home/phy/portfolio/node_modules/parse/lib/browser/Push.js"],"names":["_interopRequireDefault","require","_Object$defineProperty","exports","value","send","getPushStatus","_typeof2","_CoreManager","_ParseQuery","data","options","arguments","length","undefined","where","default","toJSON","push_time","expiration_time","expiration_interval","Error","pushOptions","useMasterKey","hasOwnProperty","getPushController","pushStatusId","query","get","DefaultController","getRESTController","request","setPushController"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.send = send;\nexports.getPushStatus = getPushStatus;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Contains functions to deal with Push in Parse.\n *\n * @class Parse.Push\n * @static\n * @hideconstructor\n */\n\n/**\n * Sends a push notification.\n * **Available in Cloud Code only.**\n *\n * See {@link https://docs.parseplatform.org/js/guide/#push-notifications Push Notification Guide}\n *\n * @function send\n * @name Parse.Push.send\n * @param {object} data -  The data of the push notification. Valid fields\n * are:\n *   <ol>\n *     <li>channels - An Array of channels to push to.</li>\n *     <li>push_time - A Date object for when to send the push.</li>\n *     <li>expiration_time -  A Date object for when to expire\n *         the push.</li>\n *     <li>expiration_interval - The seconds from now to expire the push.</li>\n *     <li>where - A Parse.Query over Parse.Installation that is used to match\n *         a set of installations to push to.</li>\n *     <li>data - The data to send as part of the push.</li>\n *   <ol>\n * @param {object} options Valid options\n * are:<ul>\n *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n *     be used for this request.\n * </ul>\n * @returns {Promise} A promise that is fulfilled when the push request\n *     completes.\n */\n\n\nfunction send(data\n/*: PushData*/\n)\n/*: Promise*/\n{\n  var options\n  /*:: ?: FullOptions*/\n  = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (data.where && data.where instanceof _ParseQuery.default) {\n    data.where = data.where.toJSON().where;\n  }\n\n  if (data.push_time && (0, _typeof2.default)(data.push_time) === 'object') {\n    data.push_time = data.push_time.toJSON();\n  }\n\n  if (data.expiration_time && (0, _typeof2.default)(data.expiration_time) === 'object') {\n    data.expiration_time = data.expiration_time.toJSON();\n  }\n\n  if (data.expiration_time && data.expiration_interval) {\n    throw new Error('expiration_time and expiration_interval cannot both be set.');\n  }\n\n  var pushOptions = {\n    useMasterKey: true\n  };\n\n  if (options.hasOwnProperty('useMasterKey')) {\n    pushOptions.useMasterKey = options.useMasterKey;\n  }\n\n  return _CoreManager.default.getPushController().send(data, pushOptions);\n}\n/**\n * Gets push status by Id\n *\n * @function getPushStatus\n * @name Parse.Push.getPushStatus\n * @param {string} pushStatusId The Id of Push Status.\n * @param {object} options Valid options\n * are:<ul>\n *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n *     be used for this request.\n * </ul>\n * @returns {Parse.Object} Status of Push.\n */\n\n\nfunction getPushStatus(pushStatusId\n/*: string*/\n)\n/*: Promise<string>*/\n{\n  var options\n  /*:: ?: FullOptions*/\n  = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var pushOptions = {\n    useMasterKey: true\n  };\n\n  if (options.hasOwnProperty('useMasterKey')) {\n    pushOptions.useMasterKey = options.useMasterKey;\n  }\n\n  var query = new _ParseQuery.default('_PushStatus');\n  return query.get(pushStatusId, pushOptions);\n}\n\nvar DefaultController = {\n  send: function (data\n  /*: PushData*/\n  , options\n  /*:: ?: FullOptions*/\n  ) {\n    return _CoreManager.default.getRESTController().request('POST', 'push', data, options);\n  }\n};\n\n_CoreManager.default.setPushController(DefaultController);"]},"metadata":{},"sourceType":"script"}